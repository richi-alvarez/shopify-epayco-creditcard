// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String          @id
  shop          String
  state         String
  isOnline      Boolean         @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  shopify_tdc_configurationshopify shopify_tdc_configurationshopify?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model shopify_tdc_configurationshopify {
  id          Int     @id @default(autoincrement())
  session     Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String  @unique
  shop        String
  ready       Boolean @default(true)
  apiVersion  String  @default("unstable")
  pCustId    String
  pKey       String
  privateKey String
  publicKey  String
  lenguage   String 

  @@index([sessionId])
}

model shopify_tdc_paymentsession {
  id            String          @id
  gid           String
  group         String
  amount        Decimal
  test          Boolean
  currency      String
  kind          String
  shop          String
  paymentMethod String          
  customer      String          
  refunds       shopify_tdc_refundsession[]
  captures      shopify_tdc_capturesession[]
  void          shopify_tdc_voidsession?
  proposedAt    DateTime
  status        String?
  clientDetails String?
  threeDSecureAuthentication String?
}

model shopify_tdc_refundsession {
  id         String         @id
  gid        String
  payment    shopify_tdc_paymentsession @relation(fields: [paymentId], references: [id])
  paymentId  String
  amount     Decimal
  currency   String
  proposedAt DateTime
  status     String?
  @@index([paymentId], map: "shopify_tdc_refundsession_paymentId_fkey")
}

model shopify_tdc_capturesession {
  id         String          @id
  gid        String
  payment    shopify_tdc_paymentsession  @relation(fields: [paymentId], references: [id])
  paymentId  String
  amount     Decimal
  currency   String
  proposedAt DateTime
  status     String?
  @@index([paymentId], map: "shopify_tdc_capturesession_paymentId_fkey")
}

model shopify_tdc_voidsession {
  id         String          @id
  gid        String
  payment    shopify_tdc_paymentsession  @relation(fields: [paymentId], references: [id])
  paymentId  String          @unique
  proposedAt DateTime
  status     String?
}
